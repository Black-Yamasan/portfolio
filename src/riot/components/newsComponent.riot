<news-component>
  <section class="l-section">
    <div class="o-heading u-ta-c u-mb-80 js-scrollIn">
      <h2 class="o-heading__inner js-showBorder"><span class="o-heading__text">News</span></h2>
    </div>
    <div class="l-content js-scrollIn">
      <ul class="c-news" if={!state.isError}>
        <li class="c-news__child" each={ (item, i) in state.items }>
          <a href="{ item.url }" class="c-news__link u-text-link" target="_blank">{ item.title }</a>
        </li>
      </ul>
      <p class="o-text u-ta-c" if={state.isError}>データを取得出来ませんでした。</p>
    </div>
  </section>

  <script>
    import { scrollAddClass } from '$Controller/_scrollAddClass';
    // const KEY = 'Basic Zm5BRHBjcEUzeEFHRTkzc1pmYzJVb2JVQXBaTDBzUnZsZUktb3RDTzpuZXdzOnNlcnZlcg==';
    const KEY = 'fnADpjfomBACCjiXVck6RkJ3SnOEuObwAj7qwcPJ';

    export default {
      state: {
        items: [],
        isError: false,
      },
      onBeforeMount() {
        fetch('https://graphql.fauna.com/graphql', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'read-news': KEY,
            Authorization: KEY
          },
          body: JSON.stringify({query: "{ allLists(_size: 3){data {title url}} }"})
        })
        .then(r => r.json())
        .then((res) => {
          if (typeof res.data === 'undefined' ) {
            this.update({
              isError: true
            })
            return;
          }
          this.update({
            items: res.data.allLists.data,
            isError: false
          })
        }).catch((error) => {
          this.update({
            isError: true
          });
          return;
        });
      },
      onMounted() {
        const $scrollIn = this.$$('.js-scrollIn');
        const $showBorder = this.$$('.js-showBorder');
        scrollAddClass($scrollIn, 1);
        scrollAddClass($showBorder, 1);
      },
    }
  </script>

  <style>
    :host {
      display: block;
    }

    .c-news {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      flex-direction: column;
      align-items: center;
    }

    @media screen and ( max-width: 768px ) {
      .c-news {
        display: block;
      }
    }

    .c-news__child {
      margin-bottom: 1em;
      font-size: 1.4rem;
      line-height: 1.5;
    }

    .c-news__child:last-of-type {
      margin-bottom: 0;
    }
  </style>
</news-component>